---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: master
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-master
  namespace: elasticsearch
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
      release: elasticsearch
  serviceName: elasticsearch-master
  template:
    metadata:
      labels:
        app: elasticsearch
        component: master
        release: elasticsearch
        role: master
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: master
                  release: elasticsearch
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: NODE_DATA
          value: "false"
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - |
          set -e; set -x; chown elasticsearch:elasticsearch /usr/share/elasticsearch/data; for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $datadir;
          done; chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs; for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $logfile;
          done
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
        imagePullPolicy: IfNotPresent
        name: chown
        resources: {}
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      securityContext:
        fsGroup: 1000
      serviceAccountName: elasticsearch-master
      volumes:
      - configMap:
          name: elasticsearch
        name: config
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi
      storageClassName: managed-premium

---
apiVersion: v1
data:
  data-post-start-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    CLUSTER_SETTINGS=$(curl -s -XGET "http://elasticsearch-client:9200/_cluster/settings")
    if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
      echo "Activate node ${NODE_NAME}"
      curl -s -XPUT -H 'Content-Type: application/json' "http://elasticsearch-client:9200/_cluster/settings" -d "{
        \"transient\" :{
            \"cluster.routing.allocation.exclude._name\" : null
        }
      }"
    fi
    echo "Node ${NODE_NAME} is ready to be used"
  data-pre-stop-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    echo "Prepare to migrate data of the node ${NODE_NAME}"
    echo "Move all data from node ${NODE_NAME}"
    curl -s -XPUT -H 'Content-Type: application/json' 'elasticsearch-client:9200/_cluster/settings' -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
      }
    }"
    echo ""

    while true ; do
      echo -e "Wait for node ${NODE_NAME} to become empty"
      SHARDS_ALLOCATION=$(curl -s -XGET 'http://elasticsearch-client:9200/_cat/shards')
      if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
        break
      fi
      sleep 1
    done
    echo "Node ${NODE_NAME} is ready to shutdown"
  elasticsearch.yml: |-
    cluster.name: elasticsearch

    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}
    network.host: 0.0.0.0
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE:}
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
kind: ConfigMap
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch
  namespace: elasticsearch

---
apiVersion: v1
data:
  run.sh: |-
    @test "Test Access and Health" {
      curl -D - http://elasticsearch-client:9200
      curl -D - http://elasticsearch-client:9200/_cluster/health?wait_for_status=green
    }
kind: ConfigMap
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-test
  namespace: elasticsearch

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: master
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-discovery
  namespace: elasticsearch
spec:
  clusterIP: None
  ports:
  - port: 9300
    targetPort: transport
  selector:
    app: elasticsearch
    component: master
    release: elasticsearch

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: data
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-data
  namespace: elasticsearch

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: master
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-master
  namespace: elasticsearch

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: client
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client
  namespace: elasticsearch
spec:
  ports:
  - name: http
    port: 9200
    targetPort: http
  selector:
    app: elasticsearch
    component: client
    release: elasticsearch
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: client
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client
  namespace: elasticsearch
spec:
  replicas: 2
  selector:
    matchLabels:
      app: elasticsearch
      component: client
      release: elasticsearch
  template:
    metadata:
      annotations:
        checksum/config: 5610d8f27f99a33f60458e66c377ae0899bc86cc612312974a58daa73f8741d5
      labels:
        app: elasticsearch
        component: client
        release: elasticsearch
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: client
                  release: elasticsearch
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: NODE_DATA
          value: "false"
        - name: NODE_MASTER
          value: "false"
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 2048Mi
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      securityContext:
        fsGroup: 1000
      serviceAccountName: elasticsearch-client
      volumes:
      - configMap:
          name: elasticsearch
        name: config

---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test-success
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-test
  namespace: elasticsearch
spec:
  containers:
  - command:
    - /tools/bats/bats
    - -t
    - /tests/run.sh
    image: dduportal/bats:0.4.0
    name: elasticsearch-test
    volumeMounts:
    - mountPath: /tests
      name: tests
      readOnly: true
    - mountPath: /tools
      name: tools
  initContainers:
  - command:
    - bash
    - -c
    - |
      set -ex
      # copy bats to tools dir
      cp -R /usr/local/libexec/ /tools/bats/
    image: dduportal/bats:0.4.0
    name: test-framework
    volumeMounts:
    - mountPath: /tools
      name: tools
  restartPolicy: Never
  volumes:
  - configMap:
      name: elasticsearch-test
    name: tests
  - emptyDir: {}
    name: tools

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: data
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-data
  namespace: elasticsearch
spec:
  podManagementPolicy: OrderedReady
  replicas: 2
  selector:
    matchLabels:
      app: elasticsearch
      release: elasticsearch
  serviceName: elasticsearch-data
  template:
    metadata:
      labels:
        app: elasticsearch
        component: data
        release: elasticsearch
        role: data
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: data
                  release: elasticsearch
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: DISCOVERY_SERVICE
          value: elasticsearch-discovery
        - name: NODE_MASTER
          value: "false"
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms1536m -Xmx1536m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - /data-post-start-hook.sh
          preStop:
            exec:
              command:
              - /bin/bash
              - /data-pre-stop-hook.sh
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 1536Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /data-pre-stop-hook.sh
          name: config
          subPath: data-pre-stop-hook.sh
        - mountPath: /data-post-start-hook.sh
          name: config
          subPath: data-post-start-hook.sh
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - |
          set -e; set -x; chown elasticsearch:elasticsearch /usr/share/elasticsearch/data; for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $datadir;
          done; chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs; for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $logfile;
          done
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
        imagePullPolicy: IfNotPresent
        name: chown
        resources: {}
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      securityContext:
        fsGroup: 1000
      serviceAccountName: elasticsearch-data
      terminationGracePeriodSeconds: 3600
      volumes:
      - configMap:
          name: elasticsearch
        name: config
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 64Gi
      storageClassName: managed-premium

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.32.0
    component: client
    heritage: Tiller
    release: elasticsearch
  name: elasticsearch-client
  namespace: elasticsearch

